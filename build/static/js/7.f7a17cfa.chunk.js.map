{"version":3,"sources":["components/comicsList/ComicsList.js","components/pages/ComicsPage.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["ComicsList","useState","comicsList","setComicsList","newItemLoading","setNewItemLoading","offset","setOffset","comicsEnded","setСomicsEnded","useMarvelService","loading","error","getAllComics","useEffect","onRequest","initial","then","onComicsListLoaded","newComicsList","ended","items","arr","map","item","i","id","title","thumbnail","price","className","to","src","alt","renderItems","errorMessage","ErrorMessage","spinner","Spinner","disabled","style","onClick","ComicsPage","Helmet","name","content","AppBanner","_toConsumableArray","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError"],"mappings":"iNAwFeA,EA/EI,WAEf,MAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA4CF,oBAAS,GAArD,mBAAOG,EAAP,KAAuBC,EAAvB,KACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAsCN,oBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KAEA,EAAuCC,cAAjCC,EAAN,EAAMA,QAASC,EAAf,EAAeA,MAAQC,EAAvB,EAAuBA,aAEvBC,qBAAW,WACPC,EAAUT,GAAQ,KACnB,IAGH,IAAMS,EAAY,SAACT,EAAQU,GACbX,GAAVW,GACAH,EAAaP,GACRW,KAAKC,IAIRA,EAAqB,SAACC,GACxB,IAAIC,GAAQ,EACTD,EAAgB,IACfC,GAAQ,GAKZjB,EAAc,GAAD,mBAAMD,GAAN,YAAqBiB,KAClCd,GAAkB,GAClBE,EAAUD,EAAS,GACnBG,EAAeW,IAwBnB,IAAMC,EArBN,SAAqBC,GACjB,IAAMD,EAASC,EAAIC,KAAI,SAACC,EAAMC,GAC1B,IAAOC,EAA+BF,EAA/BE,GAAIC,EAA2BH,EAA3BG,MAAOC,EAAoBJ,EAApBI,UAAWC,EAASL,EAATK,MAE7B,OACI,aADoB,CACpB,MAAIC,UAAU,eAAd,SACI,eAAC,IAAD,CAAMC,GAAE,kBAAaL,GAArB,UACI,qBAAKM,IAAKJ,EAAWK,IAAKN,EAAOG,UAAU,qBAC3C,qBAAKA,UAAU,oBAAf,SAAoCH,IACpC,qBAAKG,UAAU,qBAAf,SAAqCD,QAJXJ,MAU1C,OACI,oBAAIK,UAAU,eAAd,SACKT,IAICa,CAAYhC,GACpBiC,EAAevB,EAAQ,cAACwB,EAAA,EAAD,IAAkB,KACzCC,EAAU1B,IAAYP,EAAiB,cAACkC,EAAA,EAAD,IAAa,KAE1D,OACI,sBAAKR,UAAU,eAAf,UACKK,EACAE,EACAhB,EAED,wBACIS,UAAU,mCACVS,SAAUnC,EACVoC,MAAO,CAAC,QAAWhC,EAAc,OAAS,SAC1CiC,QAAS,kBAAK1B,EAAUT,IAJ5B,SAMI,qBAAKwB,UAAU,QAAf,6B,SC5DDY,UAhBI,WACf,OACI,qCACG,eAACC,EAAA,EAAD,WACK,sBACIC,KAAK,cACLC,QAAQ,iCAEZ,mDAEJ,cAACC,EAAA,EAAD,IACA,cAAC,EAAD,S,0FCZG,SAASC,EAAmBzB,GACzC,OCJa,SAA4BA,GACzC,GAAI0B,MAAMC,QAAQ3B,GAAM,OAAO,OAAA4B,EAAA,GAAiB5B,GDGzC,CAAkBA,IELZ,SAA0B6B,GACvC,GAAsB,qBAAXC,QAA0BA,OAAOC,YAAYC,OAAOH,GAAO,OAAOH,MAAMO,KAAKJ,GFIvD,CAAgB7B,IAAQ,OAAAkC,EAAA,GAA2BlC,IGLvE,WACb,MAAM,IAAImC,UAAU,wIHIwE","file":"static/js/7.f7a17cfa.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './comicsList.scss';\n\nconst ComicsList = () => {\n\n    const [comicsList, setComicsList] = useState([]);      //приходит массив с объектами(комисками)\n    const [newItemLoading, setNewItemLoading] = useState(false);   //спиннер загрузки доп. комиксов, эл.загрузки будет вызываться вручную при нажатии на кнопку\n    const [offset, setOffset] = useState(0);\n    const [comicsEnded, setСomicsEnded] = useState(false);         //загрузились все перс. из API\n    \n    const{loading, error,  getAllComics} = useMarvelService();\n\n    useEffect( () => {\n        onRequest(offset, true);    //true, т.е. initial: true - при первом запросе спиннер с доп. перс. не будет загр.\n    }, [])\n\n    //запрос на сервер\n    const onRequest = (offset, initial) => {   //initial - первоначальная загрузка\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)  //если первая загрузка, то спиннер загрузки доб. перс не будет отражаться, если повт.загр - будет \n        getAllComics(offset)        //сетевой запрос с нужным методом\n            .then(onComicsListLoaded)       //после получения данных сработает этот метод по отражения изменения сос-ния и отраж. интрефейса \n    }\n\n    //комиксы успешно загрузились\n    const onComicsListLoaded = (newComicsList) => {    // newCharList - придут трансформированные данные с сервера \n        let ended = false;       //эта переменная нужна,что подставить в изм.сос-ние\n        if(newComicsList < 8){\n            ended = true;\n        }\n    \n        //вот так изменится сос-ние когда придут данные с сервера\n        //новое состояние зависит от предыдущего и из-за этого стрелочная фун-ия c текущем сос-нием(пока без внесенных изм.)и мы из этой фун-ии возращаем объект\n        setComicsList( [...comicsList, ...newComicsList]);  //при первом запросе 9 перс.попадут в newCharList, при втором и посл. запросах эти первые 9 перс. будут уже в charList, а новые newCharList,т.е.предыд.сохр +новое\n        setNewItemLoading(false);\n        setOffset(offset + 8) ;  //текущее сос-ние + 8 \n        setСomicsEnded(ended);\n    }\n\n    function renderItems(arr) {      //arr - из сервиса придет массив данных\n        const items =  arr.map((item, i) => {  //полученный [] переберем на item с созданием нового  - каждый эл. и порядковый номер c 0 до 9\n            const {id, title, thumbnail, price} = item;\n\n            return (                //вернется имя персонажа и его номер\n                <li className=\"comics__item\" key={i}> \n                    <Link to={`/comics/${id}`}>\n                        <img src={thumbnail} alt={title} className=\"comics__item-img\"/>\n                        <div className=\"comics__item-name\">{title}</div>\n                        <div className=\"comics__item-price\">{price}</div>\n                    </Link>\n                </li>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"comics__grid\">\n                {items}\n            </ul>\n        )\n    }\n    const items = renderItems(comicsList);\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"comics__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            \n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}  //атр. disabled блокирует/заблокирует кнопку в замисимости, что будет в state true/false\n                style={{'display': comicsEnded ? 'none' : 'block'}}  //если перс.все загр., то кнопка исчезает('none')\n                onClick={()=> onRequest(offset)}  //если с атрибутом, то всегда указывать с ()=>\n                >   \n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n    \n}\n\nexport default ComicsList;","import {Helmet} from \"react-helmet\";\r\n\r\nimport ComicsList from '../comicsList/ComicsList';\r\nimport AppBanner from '../appBanner/AppBanner';\r\n\r\nconst ComicsPage = () => {\r\n    return(\r\n        <>\r\n           <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Page with list of our comics\"\r\n                />\r\n                <title>Comics page</title>\r\n            </Helmet>\r\n            <AppBanner/>\r\n            <ComicsList/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ComicsPage;","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"sourceRoot":""}