{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hooks.js"],"names":["View","character","thumbnail","name","description","homepage","wiki","classNames","className","src","alt","href","RandomChar","useState","char","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","imgStyle","CSSTransition","timeout","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","style","TransitionGroup","component","renderItems","disabled","Skeleton","comics","length","to","resourceURI","substring","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","this","setState","children","Component","MainPage","selectedChar","Helmet","decoration","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","res","_transformCharacter","slice","path","extension","urls","getAllComics","_transformComics","getComic","title","price","prices","pageCount","language","textObjects"],"mappings":"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","file":"static/js/6.82608821.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    \n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect( () => {\n        updateChar();  //сетевой запрос\n        // timerId = setInterval(updateChar, 3000);  //уст. таймер\n        // clearInterval(timerId);  //отписка от таймера\n    }, [])\n\n\n    //метод по загрузке персонажа\n    const onCharLoaded = (char) => {    // char - придут трансформированные данные с сервера \n        setChar(char);       //и изменять сос-ние  \n    }\n\n    //сетевой запрос\n    const updateChar = () =>{\n        const id = Math.floor(Math.random() * (1011400-1011000) + 1011000); //Math.floor -округляет рез-т,далее прописана формула метода Math.random; (1011400-101100)-min-max персон.\n\n        clearError();\n        getCharacter(id)       //вызываем один из нужных методов useMarvelService\n            .then(onCharLoaded) //после получения данных сработает этот метод\n    }\n\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(error || loading) ? <View character={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button className=\"button button__main\" onClick={updateChar}>\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n    \n}\n\nconst View = ({character}) => {\n    const {thumbnail, name, description, homepage, wiki} = character;\n    let classNames = 'randomchar__img';\n    \n    if(thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg'){\n        classNames += ' contain';\n    }\n\n    return(\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className={classNames}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">{description}</p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>    \n    )\n}\n\n\nexport default RandomChar;","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types'; \nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);   //приходит массив с объектами(персонажами)\n    const [newItemLoading, setNewItemLoading] = useState(false);   //спиннер загрузки доп. перс., эл.загрузки будет вызываться вручную при нажатии на кнопку\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);     //закончилась загрузка перс.\n\n   const {loading, error, getAllCharacters} = useMarvelService();\n\n   useEffect( () => {\n        onRequest(offset, true);    //true, т.е. initial: true - при первом запросе спиннер с доп. перс. не будет загр.\n\n        // eslint-disable-next-line     \n    }, [])\n\n   \n    //запрос на сервер\n    const onRequest = (offset, initial) => {   //initial - первоначальная загрузка\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)  //если первая загрузка, то спиннер загрузки доб. перс не будет отражаться, если повт.загр - будет \n        getAllCharacters(offset)        //сетевой запрос с нужным методом\n            .then(onCharListLoaded)       //после получения данных сработает этот метод по отражения изменения сос-ния и отраж. интрефейса \n    }\n\n\n    //персонажи успешно загрузились\n    const onCharListLoaded = (newCharList) => {    // newCharList - придут трансформированные данные с сервера \n        let ended = false; //эта переменная нужна,что подставить в изм.сос-ние\n        if(newCharList<9){\n            ended = true;\n        }\n        \n        //вот так изменится сос-ние когда придут данные с сервера\n        //новое состояние зависит от предыдущего и из-за этого стрелочная фун-ия c текущем сос-нием(пока без внесенных изм.)и мы из этой фун-ии возращаем объект\n        setCharList(charList => [...charList, ...newCharList]);  //при первом запросе 9 перс.попадут в newCharList, при втором и посл. запросах эти первые 9 перс. будут уже в charList, а новые newCharList,т.е.предыд.сохр +новое\n        setNewItemLoading(false);\n        setOffset(offset => offset + 9) ;  //текущее сос-ние + 9 \n        setCharEnded(ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected')); //current - это св-во, после рендеринга запишется ссылка на DOM-эл. и после будут перебираться эл. в этой ссылке\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();  \n    }\n\n    function renderItems(arr) {      //arr - из сервиса придет массив данных\n        const items =  arr.map((item, i) => {  //полученный [] переберем на item с созданием нового  - каждый эл. и порядковый номер c 0 до 9\n            const {id, name, thumbnail} = item;\n\n            //настроваем стиль на картинку без изобр. перс.\n            let imgStyle = {'objectFit' : 'cover'};\n            if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n            \n            return (                //вернется имя персонажа и его номер\n            \n                <CSSTransition \n                    key={item.id} \n                    timeout={3000} \n                    classNames=\"char__item\">\n    \n                    <li \n                        className=\"char__item\"\n                        tabIndex={0} //уст ручной фокус\n                        ref={el => itemRefs.current[i] = el}  //itemRefs.current - массив ссылок, ктр будут последовательно формироваться\n                        key={id}\n                        onClick={() => {\n                                props.onCharSelected(id);  //при клике на персонажа получаем id и передаем в App.js\n                                focusOnItem(i);  //при клике на перс сработае фокус\n                            }\n                        } \n                        onKeyPress={(e) => {        //событие, ктр срабаТывает на нажатие клавиш\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(id);\n                                focusOnItem(i);\n                            }\n                        }}\n                        > \n                            <img src={thumbnail} alt={name} style={imgStyle}/>\n                            <div className=\"char__name\">{name}</div>\n                    </li>\n                </CSSTransition> \n                \n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n    \n    \n    const items = renderItems(charList);\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            \n            {errorMessage}\n            {spinner}\n            {items}\n            \n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}  //атр. disabled блокирует/заблокирует кнопку в замисимости, что будет в state true/false\n                style={{'display': charEnded ? 'none' : 'block'}}  //если перс.все загр., то кнопка исчезает('none')\n                onClick={()=> onRequest(offset)}  //если с атрибутом, то всегда указывать с ()=>\n                >   \n                <div className=\"inner\">load more</div>\n            </button>\n        </div> \n    )\n}\n\n//проверяем, чтобы пропс пришел функцией\nCharList.propTypes = {\n    onCharSelected: PropTypes.func\n}\n\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom'; \n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.scss';\n\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);     //если бы указали пустой объект {}, то это означает true и мы не смогли бы загрузить по условию скелетон\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect( () => {\n        updateChar()  //сетевой запрос \n        \n        // eslint-disable-next-line\n    }, [props.charId])\n\n    //сетевой запрос \n    const updateChar = () =>{\n        const {charId} = props;  //получим Id из app.js, а они из CharList\n        if(!charId){    //если нет Id, то просто остановим \n            return;\n        }\n\n        clearError();\n        getCharacter(charId)       //вызываем метод из useMarvelService\n            .then(onCharLoaded) //после получения данных сработает этот метод\n    }\n\n\n    //метод по уже загруженным перс.\n    const onCharLoaded = (char) => {    //char - придут трансформированные данные с сервера \n        setChar(char);               //и изменять сос-ние \n    }\n\n\n    const skeleton = !(error || loading || char) ? <Skeleton/> : null; //первоначально будет отражаться скелетон, а потом загрузится после запроса все ост\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(error || loading || !char) ? <View character={char} /> : null;\n            //нет ошибки, нет загрузки и есть персонаж(!char)\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n\n}\n\nconst View =({character}) => {\n    const {name, thumbnail, description, homepage, wiki, comics} = character;\n    \n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n    \n    return(\n        <>\n            <div className='char__basics'>\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki}className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n              {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            \n            <ul className=\"char__comics-list\">\n                {comics.length ? null : \"There is no comics with this character\"}\n                {   \n                    comics.map((item, i) => {\n\n                        if(i > 9) return; //если комиксов больше 10, то дальше они не будет формироваться\n\n                        return(\n                            <li \n                                key={i}   //при создании нового эл.(они будут создаваться по этому шаблону), нужен key и по умолчанию укажем порядковый номер эл.(i)\n                                className=\"char__comics-item\">\n                                     \n                                    <Link to={`/comics/${item.resourceURI.substring(43)}`}>\n                                        {item.name}\n                                    </Link> \n                            </li>\n                        )\n                    })\n                }\n\n            </ul>\n        </>\n    )\n}\n\n\n//проверяем, чтобы пропс пришел числом\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}  \n\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","import { Component } from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nclass ErrorBoundary extends Component{\r\n\r\n    state ={\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo){\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if(this.state.error){           //если прошла ошибка, то картинка с ошибкой\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children  //если нет ошибки, то рендерится компонент, ктр обернут этим комп.\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState} from 'react';\r\nimport {Helmet} from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    //чтобы передать инфо(id) из CharList в CharInfo нужен промежуточны компонент(MainPage) \r\n    const [selectedChar, setChar] = useState(null)   //данных пока нет\r\n\r\n    //метод, ктр будет изменять сос-ние state через аргумент( получив id из CharList)\r\n    const onCharSelected = (id) => {\r\n        setChar(id)\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected} />\r\n                </ErrorBoundary>\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n              \r\n                \r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}}  src={img} alt=\"Error\"/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hooks';\r\n\r\nconst useMarvelService = ()  => {\r\n    const {loading, error, request, clearError} = useHttp();\r\n\r\n   const _apiBase = 'https://gateway.marvel.com:443/v1/public/'; \r\n   const _apiKey = 'apikey=b4e99c5feecbc58cf8b09dc8585dac81';\r\n   const _baseOffset = 210;  //загружаются перс. с 210 отступа\r\n\r\n\r\n    const getAllCharacters = async (offset = _baseOffset, name='') => {      //по умолчанию будут загружаться перс. с 210 отступа(если при отправке запроса не указан арг)\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);   //получаем большой массив с объектами\r\n        return res.data.results.map(_transformCharacter);     //в полученном рез-те отбираем нужный массив и создав отдельный массив(map) трансформируя их по конкретным данным \r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?limit=9&offset=210&${_apiKey}`); //получаем большой объект с данными сделав запрос\r\n        return _transformCharacter(res.data.results[0]); //возращается только те данные, ктр нам нужны; [0] - один персонаж\r\n    }\r\n\r\n    const _transformCharacter = (char) => {   //char(т.е. res.data.results[0]) - получаем объект данных их сервера, в getCharacter адрес запроса указан в res\r\n        return {                        //и возращается только то, что нам нужно  \r\n            id: char.id,  \r\n            name: (char.name.length > 22) ? `${char.name.slice(0, 22)}...` : char.name,\r\n            description: char.description ? `${char.description.slice(0, 210)}...` : 'There is no description for this character',\r\n            //если есть, то обрезает с 0 до 210 букв и дописывает ..., если описания нет, то выходит это сообщение \r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension, \r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items  \r\n        }  \r\n    }\r\n\r\n    const getAllComics = async(offset=0) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,  \r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension, \r\n            title: comics.title,\r\n            price: comics.prices[0].price ? `${comics.prices[0].price }$` : 'not available',\r\n         \r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} pages` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    return {\r\n        loading, \r\n        error, \r\n        clearError, \r\n        getAllCharacters, \r\n        getCharacter, \r\n        getAllComics, \r\n        getComic, \r\n        getCharacterByName}\r\n}\r\n\r\nexport default useMarvelService;","import { useState, useCallback } from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);   //загружается что-то\r\n    const [error, setError] = useState(null);\r\n\r\n    //этот запрос будет помещен в дочерн. комп., чтобы не запускался в бесконечнный цикл указан useCallback  \r\n    const request = useCallback(async (url, method='GET', body=null, headers={'Content-Type': 'application/json'}) => {          //если метод не прописан, то по умолчанию GET\r\n    \r\n        setLoading(true);  //перед отправкой запроса будет отражаться загрузка(спиннер)\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});  //отправляем запрос и получаем ответ\r\n            \r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();  //получим данные в формате json\r\n\r\n            setLoading(false);      //после получение данных спиннер исчезает\r\n            return data;            //вернутся и будут отражаться данные, ктр запрашивали  \r\n\r\n        }catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);    //изменение состояние ошибки - отражазится сообщение об ошибке\r\n            throw e;\r\n        }\r\n\r\n    }, []) \r\n\r\n\r\n    //фун-ия по очистке ошибок, по умолчанию она не будет очищаться\r\n    const clearError = useCallback( ()=> {\r\n        setError(null)              //сообщение об ошибке исчезнет\r\n    }, []);\r\n\r\n\r\n    return {loading, request, error, clearError}    //этот собственный хук будет возращать эти объекты, т.е мы их экспортируем в др. комп. или хуки\r\n}"],"sourceRoot":""}